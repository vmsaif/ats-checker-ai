# Author: Saif Mahmud
# Date: 2024-05-01
# Description: This file contains the task descriptions for the 'ATS Pass AI' project.
# Version: 1.0


cover_letter_generation_task:
  description: >
    Generate a customized cover letter for a specific job application using the provided applicant details and job description. The cover letter should persuasively link the applicant’s skills, experiences, and personal philosophy with the job requirements and company culture. Ensure all placeholders are either replaced with relevant information or removed if the information is not available.

    **Information to Include:**

    1. **Introduction:** Open with a brief introduction of the applicant and the position being applied for.
    2. **Skills and Technical Proficiency:** Focus on skills directly relevant to the job description, emphasizing hard skills and technical proficiencies.
    3. **Relevant Projects and Work Experience:** Detail projects or work experiences that demonstrate the applicant’s relevant capabilities and achievements.
    4. **Alignment with Company Values:** Discuss how the applicant's philosophy or goals align with the company’s values and mission.
    5. **Soft Skills:** Highlight pertinent soft skills such as problem-solving, teamwork, and communication.
    6. **Conclusion and Call to Action:** Conclude with enthusiasm for the role, a call to review the attached resume, and an invitation to discuss the application further.

    **Personalization Tips:**
    - Customize the cover letter to the specific role and company, mentioning the company name and position at least twice.
    - Address the cover letter to a specific person whenever possible.
    - Maintain a professional, concise tone, ensuring the cover letter appears personally crafted rather than generated.


  expected_output: >
    Only mention sections, if information is available. Otherwise, simply omit the section and its placeholders. **The final output must not contain any placeholders.**
    
    [Applicant's Name]
    [Applicant's Address, if available]
    [City, State, Zip Code, if available]
    [Email Address, if available]
    [Date]

    [Hiring Manager's Name]
    [Company's Name]
    [Company's Address, if available]
    [City, State, Zip Code, if available]

    Dear [{{Hiring Manager's Name}} or Hiring Manager],

    Introduction: (Briefly introduce yourself and state the position you are applying for.)

    Paragraph 1: (Discuss your skills and technical proficiencies that align with the job description, providing specific examples.)

    Paragraph 2: (Provide detailed examples of relevant projects or work experiences, including outcomes and their relevance to the job requirements.)

    Paragraph 3: (Explain how your philosophy or career goals align with the company's values and mission.)

    Paragraph 4: (Highlight your soft skills and their relevance to the role.)

    Conclusion: (Express your interest in the role, invite the hiring manager to review your resume, and suggest a follow-up discussion.)

    Sincerely,
    [Applicant's Name]

latex_resume_generation_task:
  description: >
    Your task is to generate a one-page resume in LaTeX format based on the provided data. 
    If a section is not present do not include it including the placeholders, and square brackets []. Each **word** must be replaced with \textbf{word} in LaTeX.
    
  expected_output: >
    \input{preamble.tex} 

    \namesection{[First]}{[Last] }{ \urlstyle{same}\href{[website/portfolio link with https://]}{[website link without https://]} | [Similarly other available links, eg, linkedin]\\
        \href{mailto:[email address]}{[email address]} | [phone number] | [address]\\}

    \begin{minipage}[t]{0.36\textwidth}
        \section{Education} % if data available
          \subsection{[Institute Name]}
          \summaryPoints{[Degree] | [Major] | GPA: [GPA] }
          \subHeading{Graduated [Graduation Date]}
        \sectionsep

        \section{Relevant Courses} % if data available
          [Course name] (Tools, Frameworks up to 2)\\ for example: 
          Distributed Computing (Python | JavaScript) \\
          % ...so on 
        \sectionsep

        \section{Skills} 
        \subHeading{[Category name 1]}
          [name 1] \textbullet{} \textbf{[name 2]} \textbullet{} [name 3] \textbullet{} [name 4] \textbullet{} [name 5] \\
        \skillsVSpace

        \subHeading{[Category name 2]}
          [name 1] \textbullet{} \textbf{[name 2]} \textbullet{} [name 3] \textbullet{} [name 4] \textbullet{} [name 5] \\
        \skillsVSpace
        \sectionsep

        \section{VOLUNTEER} % if data available
          \subsection{[Title]}
          \subHeading{[Role]| [Location] | [Timeline]}
          - [highlights] \newline
          - [highlights]
        \sectionsep

        \section{ACTIVITIES} % if data available
        - [Activity 1] \\
        - [Activity 2]

    \end{minipage}
    \hfill
    \begin{minipage}[t]{0.63\textwidth}

        \section{Career Goal} 
          \betweensummaryPointsionVSpace
          \subHeading{[write the career goal]}
        \sectionsep

      \section{[experience type, eg, Work or Project Experience]}
        \experienceTitle{[Title 1]}
        \summaryPoints{[Any keywords upto 3 separated by Pipe symbol and an space] }
        \subHeading{[City, State] | [from month year] - [to month year]}
        
        \vspace{15pt} % Hacky fix for awkward extra vertical space only for the first section, otherwise, \vspace{5pt} is sufficient
        
        \begin{tightemize}
          \item [highlight 1, if you use any % symbol, use \%, for example 50\%, same for & symbol and other special characters]
          \item [highlight 2]
          \item [highlight 3]
          \item [Relevant link, example: Project repository available on \href{[GitHub link]}{\underline{GitHub}}.]
        \end{tightemize}
      \sectionsep

        \experienceTitle{[Title 2]}
        [... so on, repeat the same structure for other experiences...]


      % If there is another type of experience, eg, you chose work experience, then you found another type eg, project experience, then you can add another section here. However, do not repeat.

      \section{[If available, another type of experience between Work Experience and Project Experience depending which one you chose \section]}
        \experienceTitle{[Title 1]}
        \summaryPoints{[Any keywords upto 3 separated by Pipe symbol and an space] }
        \subHeading{[City, State] | [from month year] - [to month year]}
        \vspace{5pt}
        \begin{tightemize}
          \item [highlight 1]
          \item [highlight 2]
          \item [highlight 3]
          \item [Relevant link, example: Project repository available on \href{[GitHub link]}{\underline{GitHub}}.]
        \end{tightemize}
      \sectionsep

        \experienceTitle{[Title 2]}
        %... so on, repeat the same structure for other experiences...
      \end{minipage}
    \end{document}

resume_compilation_task:
  description: >
    You will receive a structured JSON object containing organized resume data. Your task is to format this data into a professional resume in plain text format. 

    **Formatting Rules:**
    * **Strictly follow the format provided below, ensuring consistent spacing and use of new lines.** 
    * Place a single empty line between each section (e.g., Summary, Skills, Project Experience, Work Experience, Education, References).
    * Place a single empty line between each project or work experience entry.
    * Maintain consistent indentation. All bullet points should be indented with a single hyphen (-) followed by a space.
    * Avoid extra spaces between words or punctuation marks.
    * Ensure there is a single space before and after each "|" character.
    * Pay close attention to the specific formatting required for each section, such as the Education section. Make sure to include all required elements in the correct order.
    * In the Skills section, separate items with commas, not hyphens. Make sure to group skills under appropriate categories.

  expected_output: >
    Do not mention any section that is not present in the JSON data. Do not include any null, n/a, or empty values in the final resume.

    Resume Format:

    [empty line]
    # **[applicant's First and Last Name]**
    [Phone] | [Email] | [LinkedIn/Profile URL] | [Personal Website URL] 
    [Address], [City], [State]

    [empty line]
    ## Summary
    [Summary]

    [empty line]
    ## Skills

    [empty line]
    **[Category 1]:** (eg, Programming Languages:)
    - [Skill 1], [Skill 2], [Skill 3], ... 

    [empty line]
    **[Category 2]:** (eg, Frameworks:)
    - [Skill 4], [Skill 5], ...

    [empty line]
    **[Category 3]:** (eg, Tools:)
    - [Skill 6], [Skill 7], ...

    [empty line]
    **Soft Skills:** 
    - [Skill 1], [Skill 2], [Skill 3], ...
    - [Skill 4], [Skill 5], ...

    [empty line]
    ## Project Experience
    ### [Project Title 1]
    [Start Month Year] - [End Month Year] ([Duration]) | [City], [State] 
    Technologies, frameworks, and tools used:  [List of technologies, separated by commas]
    Link: [Link to the project]
    - [Key achievement 1]
    - [Key achievement 2]
    - ...

    [empty line]
    ### [Project Title 2]
    [Start Month Year] - [End Month Year] ([Duration]) | [City], [State] 
    Technologies, frameworks, and tools used:  [List of technologies, separated by commas]
    Link: [Link to the project]
    - [Key achievement 1]
    - [Key achievement 2]
    - ...

    [empty line]
    ## Work Experience
    ### [Job Title 1]
    [Start Month Year] - [End Month Year] ([Duration]) | [Company Name] | [City], [State]
    Technologies, frameworks, and tools used:  [List of technologies, separated by commas]
    Link: [Link to the relevant work experience (e.g., company website)]
    - [Key achievement 1]
    - [Key achievement 2]
    - ...

    [empty line]
    ## Education
    **[University Name]**, [City], [State]
    - [Degree], [Major] | Graduated: [Graduation Date]
    - GPA: [GPA]

    [empty line]
    ## References

    ## [Other Sections you found in the JSON and you want to include in the resume]
    
# ------------- resume_in_json_agent -> Resume Data Structuring -------------

resume_in_json_task:
  description: >
    Your ONLY task is to organize the following input data into a JSON object representing a professional resume, EXACTLY as instructed below. Do NOT deviate from these guidelines:

    1.  **Contact Info:** Extract the following fields: "Full Name", "Phone", "Email", "LinkedIn Profile URL", "Personal Website URL", and "Address".
    2.  **Summary:** Write down the summary provided in the input data.
    3.  **Skills:** Follow the structure below to organize the skills into categories. 
      - First, fill this section from the "exact_match_with_job_description", then "partial_match_with_job_description", then after that, fill from "skills" and "technologies" from the experiences. Each category should have up to 5 skills.
      {{
        "Skills": {{
          "Programming Languages": [],
          "Frameworks": [],
          "Tools": [],
          "Soft Skills": []
        }}
      }}
        - Ensure no skill is repeated. Combine variations of the same skill (e.g., "Problem-Solving" and "Problem-solving skills").
        - Carefully determine if a skill is technical (related to tools, technologies) or soft (related to personality, work style). 
    
    4. If "Company Name" or "Link" is not available, omit them.  
    5.  **Additional:** Include any other relevant sections, like "References," based on the input data.

    **Important:** 
       - You MUST include ALL data from the input. Do NOT leave out any information. If a field is missing, represent it as an empty string ("").
       - Do NOT fabricate, invent, or add ANY information that is not explicitly stated in the input data.
       - Do not infer, assume, or create any details not directly present in the input. 
       - Focus solely on accurately organizing the given information into a structured JSON format. 

    **Input Data**:
    Check the context provided to you.


  expected_output: >
    ```json
    {
      "Contact Info": {
        "Full Name": "...",
        "Phone": "...",
        "Email": "...",
        "LinkedIn Profile URL": "...", 
        "Personal Website URL": "...",
        "Address": "..." 
      },
      "Summary": "...",
      "Skills": {
        "Technical": [
          "...", 
          "..."
        ],
        "Soft": [
          "...",
          "..." 
        ]
      },
      "Projects": [
        {
          "Project Title": "...",
          "Timeline": "... (duration)",
          "Technologies": "...",
          "Link": "...",
          "Key achievements": [
            "...", 
            "..."
          ]
        },
        ... 
      ],
      "Work": [
        {
          "Job Title": "...",
          "Company": "...",
          "Location": "...",
          "Timeline": "... (duration)",
          "Technologies": "...",
          "Link": "...",
          "Key achievements": [
            "...",
            "..." 
          ]
        },
        ...
      ],
      "Education": {
        "Degree": "...",
        "Major": "...",
        "University": "...",
        "Location": "...",
        "Graduation Date": "...",
        "GPA": "..."
      },
      "Additional": {
        "References": "..."
      }
    }
    ``` 

# ------------- generalist_agent -> applicant Basic Profile Creation -------------

personal_information_extraction_task:
  description: >
    You are given a tool that retrieves info simply by asking questions as a list of strings. Use the tool to extract comprehensive personal details.

    How you should use the tool:
    argument:
    "question": "Give me Personal Details about the applicant"

    The tool will return a large chunk of information. look "deeply" into the chunk to find your data. If you did not find a field, ask the tool again with the missing field.
    for example, if you didn't find the GitHub, ask the tool "Do the applicant have GitHub?" to get the GitHub link.

    This is what the GitHub profile link looks like: https://github.com/username
    This is what the GitHub repository link looks like: https://github.com/username/repository_name

    If you find the GitHub repository link, simply remove the repository name from the link to make it a GitHub profile link as it will contain the "username". Use that as the GitHub link.
  expected_output: >
      {
        "Personal Information": {
          "Full Name": "",
          "Phone Number": "",
          "Email": "",
          "LinkedIn": "",
          "Other Social Media Profiles": "",
          "Personal Website": "",
          "Portfolio": "",
          "GitHub": "[https://github.com/username/ not https://github.com/username/repository_name]",
          "Address": "[example: 123 Street]",
          "City": "",
          "State": "",
          "Zip Code": "",
          "Country": "",
          ...
        }
      }

education_extraction_task:
  description: >
    You are given a tool that retrieves info simply by asking questions as a list of strings. Use the tool to extract comprehensive education details.
    How you should use the tool:
    argument:
    "question": "Give me the list of all educational qualifications, including degrees, majors, universities, graduation dates, and any honors or distinctions."
    The tool will return a large chunk of information. look into the chunk to find your data. If you did not find a field, Re-run the tool with the missing field. 
  expected_output: >
      {
        "Education": {
          "Degree": "",
          "Major": "",
          "University": "",
          "University Location": "",
          "Graduation Date": "",
          "GPA": "",
          "Honors/Distinctions": "
          ... 
        }
      }

coursework_extraction_task:
  description: >
    You are given a tool that retrieves info simply by asking questions as a list of strings. Use the tool to extract comprehensive coursework details.
    How you should use the tool:
    argument:
    "question": "Give me a list of all relevant coursework, including course names."
    
    The tool will return a large chunk of information. look into the chunk to find your data. If you did not find a field, ask the tool again with the missing field. Do not make up any information.

    After extracting the coursework, prioritize the courses from top to bottom that are relevant to the job description as the first 3-5 courses in the list, ignoring others. 

    Here are the Job Description Keywords:
    {job_description_keywords}
  expected_output: >
    Ignore any key if not available. Relevant courses should be prioritized.
      {
        "Relevant Coursework (to the Job Description)": [
          "Course 1",
          "Course 2",
          "Course 3",
          ...
        ]
      }

volunteer_work_extraction_task:
  description: >
    You are given a tool that retrieves info simply by asking questions as a list of strings. Use the tool to extract comprehensive volunteer work details.
    How you should use the tool:
    argument:
    "question": "Give me a list of all volunteer experiences, including organization names, roles, responsibilities, and dates."
    
    The tool will return a large chunk of information. look into the chunk to find your data. If you did not find a field, ask the tool again with the missing field. Do not make up any information.
  expected_output: >
      {
        "Volunteer Work": [
          {
            "Organization Name": "",
            "Role": "",
            "Responsibilities": "",
            "Timeline": "",
            ...
          },
          ...
        ]
      }

awards_recognitions_extraction_task:
  description: >
    You are given a tool that retrieves info simply by asking questions as a list of strings. Use the tool to extract comprehensive awards and recognition details.
    How you should use the tool:
    argument:
    "question": "Give me a list of all awards and recognitions, including award names, awarding organizations, dates, and reasons for recognition."
    
    The tool will return a large chunk of information. look into the chunk to find your data. If you did not find a field, ask the tool again with the missing field. Do not make up any information.
  expected_output: >
    In JSON format: 
      {
        "Awards and Recognitions": [
          {
            "Award Name": "",
            "Awarding Organization": "",
            "Date": "",
            "Reason": "",
            ...
          }, 
          ...
        ]
      }

references_extraction_task:
  description: >
    You are given a tool that retrieves info simply by asking questions as a list of strings. Use the tool to extract comprehensive reference details.
    How you should use the tool:
    argument:
    "question": "Who are the professional references and what are their contact details?" 
    
    The tool will return a large chunk of information. look into the chunk to find your data. If you did not find a field, ask the tool again with the missing field. Do not make up any information.
  expected_output: >
    {
      "References": [
        {
          "Name": "",
          "Position": "",
          "Company": "",
          "Contact Information": "",
          "Relationship": "",
          ...
        }, 
        ...
      ]
    }

personal_traits_interests_extraction_task:
  description: >
    You are given a tool that retrieves info simply by asking questions as a list of strings. Use the tool to extract comprehensive personal traits and interests details.
    How you should use the tool:
    argument:
    "question": "Give me a list of all personal traits and interests, including strengths, weaknesses, hobbies, and passions."
    
    The tool will return a large chunk of information. look into the chunk to find your data. If you did not find a field, ask the tool again with the missing field. Do not make up any information.
  expected_output: >
    {
      "Personal Traits and Interests": {
        "Strengths": "",
        "Hobbies": "",
        "Passions": "",
        ...
      }
    }

miscellaneous_extraction_task:
  description: >
    You are given a tool that retrieves info simply by asking questions as a list of strings. Use the tool to extract comprehensive miscellaneous details.
    How you should use the tool:
    argument:
    "question": "Give me any additional information that you would like to include in your profile, such as languages spoken, certifications, professional affiliations, or other relevant details."
    
    The tool will return a large chunk of information. look into the chunk to find your data. If you did not find a field, ask the tool again with the missing field. Do not make up any information.
  expected_output: >
      {
        "Miscellaneous": {
          "Languages Spoken": "",
          "Certifications": "",
          "Professional Affiliations": "",
          "Other Relevant Details": "",
          ...
        }
      }

profile_builder_task:
  description: >
    Based on the information extracted from the applicant's information, you will create a comprehensive applicant profile by combining all the extracted details.

    You will use the extracted data from the previous tasks as your context input to create a detailed applicant profile. Ensure that the profile is well-organized, and accurate, and includes all the relevant information extracted from the applicant's input.

    In your input context, some tasks will not have any data or say provided context does not have any data, you should ignore those tasks and not include them in the final output. Only look at the data you have found in the context.

    The final output **must not contain** any pair which has "key" = null values. You should only include pairs that have values. Remove any pair that has a null value.

  expected_output: >
    
    In JSON format
      {
        "applicant Profile": {
          "Personal Details": {
            "Full Name": "",
            "Phone Number": "",
            "Email": "",
            "LinkedIn": "",
            "Other Social Media Profiles": "",
            "Personal Website": "",
            "Portfolio": "",
            "GitHub": "",
            "Address": "",
            "City": "",
            "State": "",
            "Zip Code": "",
            "Country": "",
            ...
          },
          
        "Education": {
          "Degree": "...",
          "Major": "...",
          "University": "...",
          "Location": "...",
          "Graduation Date": "...",
          "GPA": "..."
        },
        "Volunteer Work": [
          {
            "Organization Name": "",
            "Role": "",
            "Responsibilities": "",
            "Timeline": "",
            ...
          }
        ],
        "Awards and Recognitions": [
          {
            "Award Name": "",
            "Awarding Organization": "",
            "Date": "",
            "Reason": "",
            ...
          }
        ],
        "References": [
          {
            "Name": "",
            "Position": "",
            "Company": "",
            "Contact Information": "",
            "Relationship": "",
            ...
          }
        ],
        "Personal Traits and Interests": {
          "Strengths": "",
          "Weaknesses": "",
          "Hobbies": "",
          "Passions": "",
          ...
        },
        "Miscellaneous": {
          "Languages Spoken": "",
          "Certifications": "",
          "Professional Affiliations": "",
          "Other Relevant Details": "",
          ...
        }
      }
    }

# ------------- generalist_agent -> applicant Experiences Extraction -------------

work_experience_extraction_task:
  description: >
    The task involves extracting detailed information about the applicant's work experiences, including work titles, durations, team sizes, roles, technologies used, and outcomes. Use the tool to extract this information from the applicant's input.

    {applicant_info_organized_data}
    
  expected_output: >
    in JSON format:
      {
        "Work Experience": [
          {
            "Job Title": "",
            "Company Name": "",
            "Timeline": "",
            "Technologies, frameworks, and tools Used": "",
            "Skills": "",
            "Link": "",
            "Key Highlights": [
              "",
              "",
              "",
              ""
            ],
            "Team size": "",
            "Outcomes": ""
          }
        ]
      }
    
project_experience_extraction_task:
  description: >
    The task involves extracting detailed information about the applicant's project experiences, including project titles, durations, team sizes, roles, technologies used, and outcomes. Use the tool to extract this information from the applicant's input.
   
    Here is the structured data you need to extract the project experiences from:
    {applicant_info_organized_data}

  expected_output: >
    in JSON format:
      {
        "Project Experience": [
          {
            "Project Title": "",
            "Timeline": "",
            "Technologies, frameworks, and tools Used": "",
            "Skills": "",
            "Link": "",
            "Key Highlights": [
              "",
              "",
              "",
              ""
            ],
            "Team size": "",
            "Outcomes": ""
          }
        ]
      }


# ------------- generalist_agent -> Process information from the applicant's experiences -------------

split_context_of_experience_choosing_task:
  description: >
    Split the context provided to you at the breaking point "Explanation for choosing and not choosing Other Experiences:". In your output, you will provide everything before the "Explanation for choosing and not choosing Other Experiences:" as the final output of the task.

    The context you need to split is provided to you from the previous task.
    
  expected_output: >
    Everything before the "Explanation for choosing and not choosing Other Experiences:" will be the final output of the task.

gather_info_of_chosen_experiences:
  description: >
    Extract and provide detailed information for each of the "selected_experiences" using the content below. Maintain the order of experiences as they are given, and group them correctly as "Work Experience", "Project Experience" and Recent Experience.

    Also, use the provided tool to search for more information about the experiences listed simply by asking the tool for the information you need as a question string.

  expected_output: >
    [Preserve the order and priority of experiences. Group them as "Work Experience" or "Project Experience" accordingly. Provide the following details for each experience.]
    
    In JSON format:
    {
      "Work Experience": [
        {
          "Title": "",
          "Company Name": "",
          "Timeline": "",
          "Technologies, frameworks, and tools Used": "",
          "Skills": "",
          "Link": "",
          "Key Highlights": [
            "",
            "",
            "",
            ""
          ],
          "Team size": "",
          "Outcomes": ""
        }
      ],
      "Project Experience": [
        {
          "Title": "",
          "Timeline": "",
          "Technologies, frameworks, and tools Used": "",
          "Skills": "",
          "Link": "",
          "Key Highlights": [
            "",
            "",
            "",
            ""
          ],
          "Team size": "",
          "Outcomes": ""
        }
      ]
    }

split_context_of_ats_friendly_keywords_into_experiences:
  description: >
    Split the context provided to you at the breaking point "## Report on Changes". In your output, you will provide everything before the "Report on Changes" as the final output of the task. Ensure you maintain the order of experiences as they are given. The structure should be the same as the input context. Do not remove any words from the "Technologies", "Key Highlights", "Skills", "Outcomes", "Link", "Team size", "Duration", "Timeline", or "Title".

    The context you need to split is provided to you from the previous task.

  expected_output: >
    Every Single line before the "Report on Changes" will be the final output of the task in JSON format with the same structure as the input context. 

# ------------- career_objective_agent -> Career Objective Crafting -------------

career_objective_task:
  description: >
    Craft a **captivating** and **actionable** career objective statement for the applicant's resume, designed to immediately capture the attention of recruiters and hiring managers. 

    This objective should:
    - **Highlight the applicant's unique value proposition:**  Emphasize the applicant's skills, experiences, and achievements that set them apart from other candidates.
    - **Align with the company's mission and the job description:**  Demonstrate the applicant's understanding of the company's goals and how their skills can contribute to them.
    - **Be concise and impactful:**  Use strong verbs and compelling language to create a memorable statement that leaves a lasting impression.

    **Provided to you:**
    - **Skills of the applicant:** 
      Check the context provided to you from the previous task.
    - **Job Description:** 
    {job_description}

    - **Tool:** This tool is directly connected to the applicant's information. You will use the provided tool to ask questions and gather the necessary information to create the career objective statement. So prepare the questions accordingly. Also, consider(not mandatory) the applicant's philosophy and approach to software development when crafting the career objective statement if available.

    Make the career objective statement concise and impactful, focusing on the applicant's unique value proposition and how it aligns with the job description and the company's mission. Do not make more than 3-4 sentences. It must include the Job Title and the Company Name.

  expected_output: >
    A concise and impactful career objective statement that immediately captures the attention of recruiters and hiring managers, highlighting the applicant's unique value proposition, aligning with the company's mission and the job description, and leaving a lasting impression. 

    In JSON format:
      {
        "Career Objective": "..."
      }

# ------------- cross_match_evaluator_with_job_description_agent -> -------------

ats_friendly_skills_task:
  description: >
    Your task is to analyze and compare the keywords and phrases from a job post, which have already been extracted, against the context provided to you. 
    
    Evaluate the degree of similarity between these keywords.

    Source 1 (Job Description Keywords): 
    {src_1}

    Source 2 (applicant's Skills and Technologies, Frameworks, Tools, Soft Skills, etc.) from the context provided. 

    You are also provided with the tool to search the web for skills and technologies that are not familiar to you. 

    To use the tool, 
      query: str = Field(description="What is CrewAI?")

    ## Criteria for Evaluation:
    - **Exact Match:** Direct matches between job description requirements and applicant’s qualifications. 

    - **Partial Match:** Skills or experiences that are somehow related/ or similar but not identical to the job requirements. You should use the tool to search for the skills and technologies that you are not familiar with to determine if they are relevant to the applicant's skills. Try to find as many partial matches as possible.

    - **No Match:** Skills mentioned in the job description but are not present in the applicant's profile as well as skills that are not relevant to the applicant's skills. 

  expected_output: >
    Produce a structured report that categorizes the findings into 'Exact Match', 'Partial Match', or 'No Match'. 

    **Skills Matched With Job Description:**

    - **'Exact Match'**: Direct matches between job description requirements and applicant’s qualifications. An exact match is a skill or experience that is mentioned in both the job description and the applicant's profile using the same or very similar terms.

    In JSON Format. Example:

      {
        "applicant_skills": {
          "exact_match_with_job_description": {
            "Programming Languages": [
              "item 1",
              "item 2",
              ...
            ],
            "Frameworks": [
              "item 1",
              "item 2",
              ...
            ],
            "Tools": [
              "item 1",
              "item 2",
              ...
            ],
            "Soft Skills": [
              "item 1",
              "item 2",
              ...
            ]
          }
        }
      }

    - **'Partial Match'**: Skills or experiences that are somehow related and the applicant but not identical to the job requirements.

      In JSON Format:

      {
        "applicant_skills": {
          "partial_match_with_job_description": {
            "Programming Languages": {
              "name": "item 1",
              "pertially_matched_with_job_description": "item 1"
            },
            "Frameworks": {
              "name": "item 1",
              "pertially_matched_with_job_description": "item 1"
            },
            "Tools": {
              "name": "item 1",
              "pertially_matched_with_job_description": "item 1"
            },
            "Soft Skills": {
              "name": "item 1",
              "pertially_matched_with_job_description": "item 1"
            }
          }
        }
      }

    **No Match**: Skills mentioned in the job description but are not present in the applicant's profile.
      {
        "missing_from_the_applicant_skills": {
          "Programming Languages": [
            "item 1",
            "item 2",
            ...
          ],
          "Frameworks": [
            "item 1",
            "item 2",
            ...
          ],
          "Tools": [
            "item 1",
            "item 2",
            ...
          ],
          "Soft Skills": [
            "item 1",
            "item 2",
            ...
          ]
        }
      }

split_context_of_ats_friendly_skills_task:
  description: >
    Split the context provided to you at the breaking point "No Match (from job description):" or "missing_from_the_applicant_skills" whichever comes first. In your output, you will provide everything before the "No Match (from the job description):" as the final output of the task.

    Also, you will categorize those skills of Exact Match and Partial Match into subcategories whether they are Technical Skills, Frameworks, Tools, Soft Skills or any other category you find suitable.

  expected_output: >
    In JSON:
      {
        "applicant_skills": {
          "exact_match_with_job_description": {
            "Programming Languages": [
              "item 1",
              "item 2",
              ...
            ],
            "Frameworks": [
              "item 1",
              "item 2",
              ...
            ],
            "Tools": [
              "item 1",
              "item 2",
              ...
            ],
            "Soft Skills": [
              "item 1",
              "item 2",
              ...
            ]
          },

          "partial_match_with_job_description": {
            "Programming Languages": [
              "item 1",
              "item 2",
              ...
            ],
            "Frameworks": [
              "item 1",
              "item 2",
              ...
            ],
            "Tools": [
              "item 1",
              "item 2",
              ...
            ],
            "Soft Skills": [
              "item 1",
              "item 2",
              ...
            ]
          }
        }
      }

experience_choosing_task:
  description: >
    Your task is to analyze the applicant's work and project experiences and select the 3 most relevant experiences for the provided job description, without giving undue preference to work over project experiences. Both types of experiences should be weighed equally based on their relevance.

    **Selection Criteria:**

    1. **Most Recent Experience:** Always include the most recent relevant experience unless it's significantly outdated or irrelevant as of today ({today_date}).

    2. **Relevance to Job Description:** Evaluate experiences based on:
        * **Keywords and Phrases:** Use keywords from the job description to identify relevant experiences.
        * **Tools and Technologies:** Look for experiences that involve specific tools, technologies, or frameworks mentioned in the job description.
        * **Skills:** Select experiences that demonstrate the skills required for the job.

    3. **Completing the Four Slots:** After including the most recent experience, choose three additional experiences based on their relevance. Ensure a balanced consideration of both work and project experiences. The final selection can comprise entirely of one category or a mix, depending solely on relevance.

    **Input:**
      * **Job Description Keywords:** {jd_keyword}
      * **Applicant's Experiences:** Information is provided from an earlier context.

  expected_output: >
    Output should present any combination of 3 total experiences, either all work, all projects, or a mix, selected based on their relevance to the job description and balanced consideration. You must prioritize based on importance and the most recent.

    ```json
    {
      "selected_experiences": {
        "Most Recent Experience": [
          "Work/Project": "{experience_1}",
          ],
          
        "Work/Project Experience": [
          "{experience_2}",  // if relevant
          
          
        ],
        "[The other type between work or project experience]": [ // if relevant
          ""{experience_3}"   // if relevant
        ]
      }
    }
    ```

    * **Explanation for choosing and not choosing Other Experiences:**
    ```json
    {
      "reason for choosing, How it is relevant to the job": [
        {
          "title": "...",
          "reason": "..."
        },
        ...
      ],
      "rejected_experiences": [
        {
          "title": "...",
          "reason": "Not aligned with the key requirements of the job description or less relevant compared to selected experiences."
        },
        ...
      ]
    }
    ```

# -------------Technical Details Agent (Technical Skills and Professional Affiliations Specialist) tasks--------------
skills_from_exp_and_project_task:
  description: >
    Extract a list of skills, technologies, frameworks etc used from the applicant's work experiences and project experiences. You have been given the context of work experiences and project experiences. Each work experience and project experience contains a "Technologies Used:" and "Skills:" field. Use these fields to extract the skills.

    Inside the body of the project and work experiences, you might find unfamiliar tools or technologies that might not be included in the "Technologies, frameworks, and tools Used" field. Use the provided web search tool to search for the skills and technologies that you are not familiar with. then consider them as a part of the skills. You can list fields or areas of skills and technologies up to 4 items.

    To use the tool, 
      query: str = Field(description="search query to look up")
    
  expected_output: >
    In JSON format:
      {
        "Combined Skills List": {
          "Technologies": {
            {
              "Name": "Python",
              "field": "Programming Language"
            },
            {
              "Name": "Java",
              "field": "Programming Language, ..."
            }
          },
          "Frameworks": {
            {
              "Name": "Langchain",
              "field": "AI, LLM, ..."
            },
            {
              "Name": "Angular",
              "field": "JavaScript Framework, ...."
            },
            {
              "Name": "Spring Boot",
              "field": "Java Framework"
            }
          },

          "Skills": {
            {
              "Name": "Data Analysis",
              "field": "Analytical Skills, ..."
            },
            {
              "Name": "Machine Learning",
              "field": "AI, ML, ..."
            },
            {
              "Name": "Project Management",
              "field": "Management Skills, ..."
            }
          },

          "Soft Skills": {
            {
              "Name": "Communication",
              "field": "Interpersonal Skills"
            },
            {
              "Name": "Leadership",
              "field": "Management Skills"
            },
            {
              "Name": "Teamwork",
              "field": "Collaboration Skills"
            }
          }

skills_extraction_task:
  description: >
    Your task is to combine skills, tools, technologies, frameworks, and soft skills from two different sources into one comprehensive list. 

    First Source: You are provided with a list of skills extracted from the applicant's work experiences and project experiences as context.
    
    Second Source: Use the provided semantic search tool to gather more skills. Simply ask the tool 
    
    "What skills, tools, technologies, frameworks, or soft skills does the applicant have?"

    Your job is to merge the skills from both sources into a single list, ensuring no items are omitted and that both sources are represented equally.

    You are also provided another web search tool to search for the skills that you are not familiar with to know in which field or category they belong.

  expected_output: >
    In JSON format:
      {
        "combined skills list of applicant": {
          "Technologies": {
            {
              "Name": "Python",
              "field": [
                "Programming Language",
                "AI, ML",
                "..."
                ]
            },
            {
              "Name": "Java",
              "field": [
                "Programming Language",
                "..."
              ]
            }
          },
          "Frameworks": {
            {
              "Name": "Langchain",
              "field": [
                "AI, 
                ML, 
                LLM (Large Language Model),",
                "..."
              ]
            },
            {
              "Name": "Angular",
              "field": [
                "JavaScript Framework",
                "Web Development",
                "Frontend Development",
                "..."
              ]
            },
            {
              "Name": "Spring Boot",
              "field": [
                "Java Framework",
                "..."
            }
          },

          "Skills": {
            {
              "Name": "Data Analysis",
              "field": [
                "Analytical Skills",
                "..."
              ]
            },
            {
              "Name": "Machine Learning",
              "field": [
                "AI, ML",
                "..."
              ]
            },
            {
              "Name": "Project Management",
              "field": [
                "Management Skills",
                "..."
              ]
            }
          },

          "Soft Skills": {
            {
              "Name": "Communication",
              "field": "Interpersonal Skills"
            },
            {
              "Name": "Leadership",
              "field": "Management Skills"
            },
            {
              "Name": "Teamwork",
              "field": "Collaboration Skills"
            }
          }

# --------------------------------------------------------

gather_info_of_chosen_experiences:
  description: >
    Provide detailed information for **each** of the "selected_experiences" from this content below.

    {applicant_info_organized_data}

  expected_output: >
    [Maintain the order/priority of work experiences or project experiences. Group them as "Work Experience" or "Project Experience" accordingly. Provide the following details for each experience or project.]

    In JSON format:
      {
      "selected_experiences": {
        "Most Recent Experience": [
          "Work/Project": "{Follow the JSON structure below}",
          ],
          
        "Work/Project Experience": [
          "{Follow the JSON structure below}", 
          "{Follow the JSON structure below}"   
          
        ],
        "[The other type between work or project experience]": [ 
          "{Follow the JSON structure below}"  
        ]
      }
    }

    JSON example of any work/project experiences:
    {
      "Work Experience": [
        {
          "Job Title": "...",
          "Company Name": "...",
          "Timeline": "...",
          "Duration": "...",
          "Technologies, frameworks, and tools Used": "...",
          "Skills": "...",
          "Link": "...",
          "Key Highlights": [
            "...",
            "...",
            "...",
            "..."
          ],
          "Team size": "...",
          "Outcomes": "..."
        }
      ]

      "Project Experience": [
        {
          "Project Title": "...",
          "Timeline": "...",
          "Duration": "...",
          "Technologies, frameworks, and tools Used": "...",
          "Skills": "...",
          "Link": "...",
          "Key Highlights": [
            "...",
            "...",
            "...",
            "..."
          ],
          "Team size": "...",
          "Outcomes": "..."
        }
      ]
    }

# ---------------ats_keyword_integration_agent (ATS Keyword Integration Specialist) tasks---------------

ats_friendly_keywords_into_experiences:
  description: >
    Enhance the descriptions of the applicant's experiences by integrating key job description keywords to make them more appealing to Applicant Tracking Systems (ATS) while ensuring they remain readable and relevant.

    **Guidelines:**
      - **Relevance:** Only integrate keywords that are directly relevant to the described experience.
      - **Natural Language:** Weave keywords into the narrative seamlessly; they should enhance rather than disrupt the flow.
      - **Conciseness and Clarity:** Employ powerful action verbs and succinct phrases to convey significant achievements in 1-2 compelling sentences.
      - **Contextual Accuracy:** Choose keywords that accurately reflect the skills and responsibilities in the experience. Avoid using keywords that misrepresent the applicant's role or contributions.
      - **Avoid Keyword Overload:** Maintain a balanced use of keywords to ensure natural readability and effectiveness of the description.

    **Job Description Keywords:** 
    {jd_keywords}

    After enhancing the descriptions, provide a detailed report that specifies the changes made, especially any keywords that were integrated.

    When you are done with listing the experiences with integrated keywords, provide a detailed report on changes in a new section ## Report on Changes:

    ## Report on Changes in structure in JSON:
      - **Original Sentence**: Present the sentence before any updates.
      - **Revised Sentence**: Display the sentence after keywords have been integrated.
      - **Keywords Added**: List each keyword that was newly added, ensuring they were not present before.
      - **Rationale**: Provide a detailed explanation for each keyword addition, linking the choice to specific requirements or phrases in the job description.

    To determine the duration of the most recent experience, the present date is {today_date}.

  expected_output: >
    Produce a detailed listing for each experience, categorized under 'Most Recent Experience', 'Work Experience' and 'Project Experience', with ATS-optimized descriptions. 
    
    For any project experiences, Follow this structure:
    {
      "Project Title": "",
      "Timeline": "",
      "Duration": "",
      "Technologies": "",
      "skills": "",
      "Link": "",
      "Key Highlights": [(Up to 3 key highlights)],
        "",
        "",
        "",
        ""
      ],
    }

    For any work experiences, Follow this structure:
    {
      "Job Title": "",
      "Company": "",
      "Location": "",
      "Timeline": "",
      "Duration": "",
      "Technologies": "",
      "skills": "",
      "Link": "",
      "Key Highlights": [(Up to 3 key highlights)
        "",
        "",
        "",
        ""
      ],
    }

    Final Output:

    This should maintain the original structure as in the input context, with the addition of the integrated keywords.
    {
      "applicant's Experiences with ATS Keywords": {
        "Most Recent Experience": {},
        "Work Experience/Project Experience": {},
      }
    }

    {
      "Report on Changes": {
        "ATS Pass AI": {
          [
            "Original Sentence": "Original Sentence: Developed a machine learning algorithm for image recognition using Python and TensorFlow.",
            "Revised Sentence": "Developed a **Python**-based machine learning algorithm for image recognition, utilizing **data analysis** and **data visualization** techniques.",
            "Keywords Added": ["Data Analysis", "Data Visualization"],
            "Rationale": "The job description emphasized these technical skills as critical for the role, making their inclusion essential for aligning the applicant’s experiences with the job requirements."
          ],
          [
            "Original Sentence": "...",
            "Revised Sentence": "...",
            "Keywords Added": ["..."],
            "Rationale": "..."
          ],
          ...
        },
        "Experience Title": {
          similar structure to the above.
        }
      }
    }

# professional_affiliations_task:
#   description: >
#     List all memberships in professional organizations including roles and responsibilities within these groups.
#   expected_output: >
#     A detailed account of professional affiliations, positions held, and the role played in each organization.

# ---------------Publications and Presentations Agent (Publications and Presentations Documenter)---------------

# publications_presentations_task:
#   description: >
#     Compile a list of all publications and presentations, detailing authors, titles, dates, and events where presented.
#   expected_output: >
#     A detailed list of publications and presentations, including co-authors, titles, publication dates, and event names.

# activities_leadership_task:
#   description: >
#     Document all leadership roles and activities, including specific achievements and impacts within these roles.
#   expected_output: >
#     An in-depth overview of leadership activities, detailing the roles, durations, responsibilities, and key achievements.

# languages_task:
#   description: >
#     Compile a detailed listing of all languages spoken by the applicant, along with proficiency levels for each.
#   expected_output: >
#     A comprehensive list of languages with an assessment of proficiency levels, enhancing the cultural and communication profile of the applicant.

# strengths_task:
#   description: >
#     Analyze and document the applicant's strengths based on feedback, self-assessment, and observed performance.
#   expected_output: >
#     A balanced view of the applicant's strengths, providing insights for potential employers and personal development.

# interests_task:
#   description: >
#     Identify and document detailed interests of the applicant that align with or enhance their professional profile.
#   expected_output: >
#     A detailed description of interests that complements the professional and personal traits, adding depth to the applicant's profile.

# developmental_activities_task_such as courses, training, workshops:
#   description: >
#     Gather information on all developmental activities such as courses, training, workshops, conferences, seminars, webinars, boot camps, hackathons, competitions, and scholarships.
#   expected_output: >
#     A comprehensive list and descriptions of developmental activities, showcasing ongoing learning and engagement in professional growth.







